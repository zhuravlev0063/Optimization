import numpy as np


def quadratic_simple(x1, x2):
    """Простая квадратичная функция: 2x1² + x1x2 + x2²"""
    """Начальная точка: x1=0.5, x2=1"""
    """Ответ для Градиентного спуска на 18 итерации: x1=-0.01250704, x2=0.03025652, f(x1,x2)=0.0008498896493155516"""
    """Ответ для Градиентного спуска на 10 итерации: x1=-0.04755866, x2= 0.12134306, f(x1,x2)=0.013476877593402721"""
    return 2 * x1 ** 2 + x1 * x2 + x2 ** 2

def himmelblau(x1, x2):
    """Функция Химмельблау: (x1² + x2 - 11)² + (x1 + x2² - 7)²"""
    """Начальная точка: x1=3, x2=2"""
    """Ответ для Градиентного спуска: x1=3, x2=2, f(x1,x2)=0"""
    return (x1**2 + x2 - 11)**2 + (x1 + x2**2 - 7)**2

def quadratic_constrained_1(x1, x2):
    """Квадратичная функция с ограничениями: 2x1² + 3x2² + 4x1x2 - 6x1 - 3x2"""
    """Ограничение x1 + x2 <= 1    (1 1 1)"""
    """Ограничение 2x1 + 3x2 <= 4    (2 3 4)"""
    """Ответ для Квадратичного симплекса: x1=1 x2=0 f(x1,x2)=-4"""
    return 2 * x1**2 + 3 * x2**2 + 4 * x1 * x2 - 6 * x1 - 3 * x2

def quadratic_constrained_2(x1, x2):
    """Квадратичная функция с ограничением: 2x1² + 2x1x2 + 2x2² - 4x1 - 6x2"""
    """Ограничение x1 + 2x2 <= 2    (1 2 2)"""
    """Ответ для Квадратичного симплекса: x1=0.33 x2=0.83 f(x1,x2)=-4.16"""
    return 2 * x1**2 + 2 * x1 * x2 + 2 * x2**2 - 4 * x1 - 6 * x2

def rosenbrock(x1, x2):
    """Функция Розенброка с минимумом в точке (1,1)"""
    """Начальные значения: Максимум итераций: 100, Размер популяции: 200, вероятность мутации: 0.1, границы области: (-2, 2)"""
    """Ответ для Генетического алгоритма: x1=1 x2=1 f(x1,x2)=0 """
    return (1 - x1) ** 2 + 100 * (x2 - x1 ** 2) ** 2

def rastrigin(x1, x2):
    """Функция Растригина: 20 + x1² + x2² - 10(cos(2πx1) + cos(2πx2))"""
    """Начальные значения: Максимум итераций: 1000, Размер роя: 3000, Инерция: 0.3,"""
    """Локальный коэффициент: 2.0, Глобальный коэффициент: 5.0, Границы (-5.12, 5.12)"""
    """Результат для роя частиц: x1=0  x2=0  f(x1,x2)=0  """
    return 20 + x1**2  - 10 * np.cos(2 * np.pi * x1) + x2**2 -10 * np.cos(2 * np.pi * x2)

def schwefel(x1, x2):
    """Функция Швефеля: - x1 * sin(sqrt(|x1|)) - x2 * sin(sqrt(|x2|))"""
    """Начальные значения: Максимум итераций: 100, Размер роя: 300, Инерция: 0.3,"""
    """Локальный коэффициент: 2.0, Глобальный коэффициент: 5.0, Границы (-500, 500)"""
    """Результат для роя частиц: x1=420.9687  x2=420.9687  f(x1,x2)=-837.9658  """
    return -1* x1 * np.sin(np.sqrt(np.abs(x1))) - x2 * np.sin(np.sqrt(np.abs(x2)))

def sphere(x1, x2):
    """Функция сферы: x1² + x2²"""
    """Простая квадратичная функция с глобальным минимумом в (0,0)"""
    """Начальные значения: могут быть любыми, например x1=1, x2=1"""
    """Результат для градиентного спуска: x1=0, x2=0, f(x1,x2)=0"""
    return x1**2 + x2**2


# Словарь функций для интерфейса
available_functions = {
    "Простая квадратичная": quadratic_simple,
    "Функция Химмельблау": himmelblau,
    "Квадратичная с 1 ограничением": quadratic_constrained_2,
    "Квадратичная с 2 ограниченими": quadratic_constrained_1,
    "Функция Розенброка": rosenbrock,
    "Функция Растригина": rastrigin,
    "Функция Швефеля": schwefel,
    "Функция сферы": sphere
}
